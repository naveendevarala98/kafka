#only one broker service running in 9092, if many kafka broker comma separated
spring.kafka.consumer.bootstrap-servers: localhost:9092
#consumer id to which consumer belongs
spring.kafka.consumer.group-id: myGroup
#current or no initial offset, it will take earliest offset
spring.kafka.consumer.auto-offset-reset: earliest

#kafka sends message in bytes, so deserialize use
spring.kafka.consumer.key.deserializer: org.apache.kafka.common.serialization.StringDeserializer

#string
#spring.kafka.consumer.value.deserializer: org.apache.kafka.common.serialization.StringDeserializer

#json
#kafka don't support json deserializer so using spring supoorted deserializer
spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

spring.kafka.consumer.properties.spring.json.trusted.packages=*


spring.kafka.producer.bootstrap-servers: localhost:9092

#kafka accepts in bytes so converting message to serializer
spring.kafka.producer.key.serializer: org.apache.kafka.common.serialization.StringSerializer

#string
#spring.kafka.producer.value.serializer: org.apache.kafka.common.serialization.StringSerializer
#json
spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

